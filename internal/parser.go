// Code generated by goyacc -p YY -o internal/parser.go -v internal/parser.output internal/grammar.y. DO NOT EDIT.

//line internal/grammar.y:1

package internal

import __yyfmt__ "fmt"

//line internal/grammar.y:3

//line internal/grammar.y:6
type YYSymType struct {
	yys    int
	String string
	Ast    ast
}

const NUMBER = 57346
const IDENTIFIER = 57347
const SEPARATOR = 57348
const ASSIGN = 57349
const LET = 57350
const IF = 57351
const THEN = 57352
const LE = 57353
const GE = 57354
const EQ = 57355
const NE = 57356
const OR = 57357
const AND = 57358
const ELSE = 57359
const WHILE = 57360
const PRINT = 57361
const NO_ELSE = 57362
const UMINUS = 57363

var YYToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"NUMBER",
	"IDENTIFIER",
	"SEPARATOR",
	"ASSIGN",
	"LET",
	"IF",
	"THEN",
	"LE",
	"GE",
	"EQ",
	"NE",
	"OR",
	"AND",
	"ELSE",
	"WHILE",
	"PRINT",
	"NO_ELSE",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"UMINUS",
	"'('",
	"')'",
	"'{'",
	"'}'",
}
var YYStatenames = [...]string{}

const YYEofCode = 1
const YYErrCode = 2
const YYInitialStackSize = 16

//line internal/grammar.y:82

//line yacctab:1
var YYExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const YYPrivate = 57344

const YYLast = 160

var YYAct = [...]int{

	61, 3, 70, 66, 64, 22, 23, 24, 25, 26,
	27, 68, 60, 32, 34, 18, 19, 20, 21, 59,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	38, 37, 36, 49, 18, 19, 20, 21, 52, 53,
	54, 20, 21, 67, 22, 23, 24, 25, 26, 27,
	51, 31, 30, 55, 18, 19, 20, 21, 29, 28,
	58, 63, 35, 65, 62, 1, 2, 8, 7, 69,
	22, 23, 24, 25, 26, 27, 6, 5, 4, 0,
	18, 19, 20, 21, 0, 0, 57, 22, 23, 24,
	25, 26, 27, 0, 0, 0, 0, 18, 19, 20,
	21, 0, 0, 56, 22, 23, 24, 25, 26, 27,
	0, 0, 0, 0, 18, 19, 20, 21, 17, 0,
	50, 9, 33, 22, 23, 24, 25, 26, 27, 0,
	0, 0, 0, 18, 19, 20, 21, 9, 10, 12,
	0, 13, 15, 11, 0, 0, 0, 0, 0, 0,
	0, 16, 14, 0, 0, 12, 0, 0, 0, 11,
}
var YYPact = [...]int{

	-1000, 133, -1000, 112, 53, 52, 46, -1000, -1000, -1000,
	44, 117, 117, 57, 6, 5, 4, -1000, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, -1000, -1000,
	-1000, 117, 93, -1000, -1000, 43, 117, 117, 117, 18,
	18, -1000, -1000, 13, 13, 13, 13, 13, 13, -6,
	-1000, 117, 76, 59, 33, -6, -1000, -9, -16, 133,
	133, -25, 133, -26, 26, -1000, -1000, -17, 133, -27,
	-1000,
}
var YYPgo = [...]int{

	0, 0, 64, 1, 78, 77, 76, 68, 67, 65,
}
var YYR1 = [...]int{

	0, 9, 9, 2, 2, 2, 2, 2, 2, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 5, 6, 7, 7,
	8,
}
var YYR2 = [...]int{

	0, 0, 2, 2, 2, 2, 2, 1, 1, 2,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 4, 3, 4, 7, 11,
	7,
}
var YYChk = [...]int{

	-1000, -9, -2, -3, -4, -5, -6, -7, -8, 4,
	5, 26, 22, 8, 19, 9, 18, 6, 21, 22,
	23, 24, 11, 12, 13, 14, 15, 16, 6, 6,
	6, 7, -3, 5, -3, 5, 26, 26, 26, -3,
	-3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
	27, 7, -3, -3, -3, -3, 27, 27, 27, 28,
	28, -1, -2, -1, 29, -1, 29, 17, 28, -1,
	29,
}
var YYDef = [...]int{

	1, -2, 2, 0, 0, 0, 0, 7, 8, 11,
	12, 0, 0, 0, 0, 0, 0, 3, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4, 5,
	6, 0, 0, 12, 24, 0, 0, 0, 0, 13,
	14, 15, 16, 17, 18, 19, 20, 21, 22, 26,
	23, 0, 0, 0, 0, 25, 27, 0, 0, 0,
	0, 0, 10, 0, 28, 9, 30, 0, 0, 0,
	29,
}
var YYTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	26, 27, 23, 21, 3, 22, 3, 24, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 28, 3, 29,
}
var YYTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 25,
}
var YYTok3 = [...]int{
	0,
}

var YYErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	YYDebug        = 0
	YYErrorVerbose = false
)

type YYLexer interface {
	Lex(lval *YYSymType) int
	Error(s string)
}

type YYParser interface {
	Parse(YYLexer) int
	Lookahead() int
}

type YYParserImpl struct {
	lval  YYSymType
	stack [YYInitialStackSize]YYSymType
	char  int
}

func (p *YYParserImpl) Lookahead() int {
	return p.char
}

func YYNewParser() YYParser {
	return &YYParserImpl{}
}

const YYFlag = -1000

func YYTokname(c int) string {
	if c >= 1 && c-1 < len(YYToknames) {
		if YYToknames[c-1] != "" {
			return YYToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func YYStatname(s int) string {
	if s >= 0 && s < len(YYStatenames) {
		if YYStatenames[s] != "" {
			return YYStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func YYErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !YYErrorVerbose {
		return "syntax error"
	}

	for _, e := range YYErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + YYTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := YYPact[state]
	for tok := TOKSTART; tok-1 < len(YYToknames); tok++ {
		if n := base + tok; n >= 0 && n < YYLast && YYChk[YYAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if YYDef[state] == -2 {
		i := 0
		for YYExca[i] != -1 || YYExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; YYExca[i] >= 0; i += 2 {
			tok := YYExca[i]
			if tok < TOKSTART || YYExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if YYExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += YYTokname(tok)
	}
	return res
}

func YYlex1(lex YYLexer, lval *YYSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = YYTok1[0]
		goto out
	}
	if char < len(YYTok1) {
		token = YYTok1[char]
		goto out
	}
	if char >= YYPrivate {
		if char < YYPrivate+len(YYTok2) {
			token = YYTok2[char-YYPrivate]
			goto out
		}
	}
	for i := 0; i < len(YYTok3); i += 2 {
		token = YYTok3[i+0]
		if token == char {
			token = YYTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = YYTok2[1] /* unknown char */
	}
	if YYDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", YYTokname(token), uint(char))
	}
	return char, token
}

func YYParse(YYlex YYLexer) int {
	return YYNewParser().Parse(YYlex)
}

func (YYrcvr *YYParserImpl) Parse(YYlex YYLexer) int {
	var YYn int
	var YYVAL YYSymType
	var YYDollar []YYSymType
	_ = YYDollar // silence set and not used
	YYS := YYrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	YYstate := 0
	YYrcvr.char = -1
	YYtoken := -1 // YYrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		YYstate = -1
		YYrcvr.char = -1
		YYtoken = -1
	}()
	YYp := -1
	goto YYstack

ret0:
	return 0

ret1:
	return 1

YYstack:
	/* put a state and value onto the stack */
	if YYDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", YYTokname(YYtoken), YYStatname(YYstate))
	}

	YYp++
	if YYp >= len(YYS) {
		nyys := make([]YYSymType, len(YYS)*2)
		copy(nyys, YYS)
		YYS = nyys
	}
	YYS[YYp] = YYVAL
	YYS[YYp].yys = YYstate

YYnewstate:
	YYn = YYPact[YYstate]
	if YYn <= YYFlag {
		goto YYdefault /* simple state */
	}
	if YYrcvr.char < 0 {
		YYrcvr.char, YYtoken = YYlex1(YYlex, &YYrcvr.lval)
	}
	YYn += YYtoken
	if YYn < 0 || YYn >= YYLast {
		goto YYdefault
	}
	YYn = YYAct[YYn]
	if YYChk[YYn] == YYtoken { /* valid shift */
		YYrcvr.char = -1
		YYtoken = -1
		YYVAL = YYrcvr.lval
		YYstate = YYn
		if Errflag > 0 {
			Errflag--
		}
		goto YYstack
	}

YYdefault:
	/* default state action */
	YYn = YYDef[YYstate]
	if YYn == -2 {
		if YYrcvr.char < 0 {
			YYrcvr.char, YYtoken = YYlex1(YYlex, &YYrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if YYExca[xi+0] == -1 && YYExca[xi+1] == YYstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			YYn = YYExca[xi+0]
			if YYn < 0 || YYn == YYtoken {
				break
			}
		}
		YYn = YYExca[xi+1]
		if YYn < 0 {
			goto ret0
		}
	}
	if YYn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			YYlex.Error(YYErrorMessage(YYstate, YYtoken))
			Nerrs++
			if YYDebug >= 1 {
				__yyfmt__.Printf("%s", YYStatname(YYstate))
				__yyfmt__.Printf(" saw %s\n", YYTokname(YYtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for YYp >= 0 {
				YYn = YYPact[YYS[YYp].yys] + YYErrCode
				if YYn >= 0 && YYn < YYLast {
					YYstate = YYAct[YYn] /* simulate a shift of "error" */
					if YYChk[YYstate] == YYErrCode {
						goto YYstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if YYDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", YYS[YYp].yys)
				}
				YYp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if YYDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", YYTokname(YYtoken))
			}
			if YYtoken == YYEofCode {
				goto ret1
			}
			YYrcvr.char = -1
			YYtoken = -1
			goto YYnewstate /* try again in the same state */
		}
	}

	/* reduction by production YYn */
	if YYDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", YYn, YYStatname(YYstate))
	}

	YYnt := YYn
	YYpt := YYp
	_ = YYpt // guard against "declared and not used"

	YYp -= YYR2[YYn]
	// YYp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if YYp+1 >= len(YYS) {
		nyys := make([]YYSymType, len(YYS)*2)
		copy(nyys, YYS)
		YYS = nyys
	}
	YYVAL = YYS[YYp+1]

	/* consult goto table to find next state */
	YYn = YYR1[YYn]
	YYg := YYPgo[YYn]
	YYj := YYg + YYS[YYp].yys + 1

	if YYj >= YYLast {
		YYstate = YYAct[YYg]
	} else {
		YYstate = YYAct[YYj]
		if YYChk[YYstate] != -YYn {
			YYstate = YYAct[YYg]
		}
	}
	// dummy call; replaced with literal code
	switch YYnt {

	case 2:
		YYDollar = YYS[YYpt-2 : YYpt+1]
//line internal/grammar.y:28
		{
			YYlex.(*Lexer).codeGen(YYDollar[2].Ast)
		}
	case 11:
		YYDollar = YYS[YYpt-1 : YYpt+1]
//line internal/grammar.y:46
		{
			YYVAL.Ast = &number{YYDollar[1].String}
		}
	case 12:
		YYDollar = YYS[YYpt-1 : YYpt+1]
//line internal/grammar.y:47
		{
			YYVAL.Ast = &variable{YYDollar[1].String}
		}
	case 13:
		YYDollar = YYS[YYpt-3 : YYpt+1]
//line internal/grammar.y:48
		{
			YYVAL.Ast = &binaryExpr{Op: "+", lhs: YYDollar[1].Ast, rhs: YYDollar[3].Ast}
		}
	case 14:
		YYDollar = YYS[YYpt-3 : YYpt+1]
//line internal/grammar.y:49
		{
			YYVAL.Ast = &binaryExpr{Op: "-", lhs: YYDollar[1].Ast, rhs: YYDollar[3].Ast}
		}
	case 15:
		YYDollar = YYS[YYpt-3 : YYpt+1]
//line internal/grammar.y:50
		{
			YYVAL.Ast = &binaryExpr{Op: "*", lhs: YYDollar[1].Ast, rhs: YYDollar[3].Ast}
		}
	case 16:
		YYDollar = YYS[YYpt-3 : YYpt+1]
//line internal/grammar.y:51
		{
			YYVAL.Ast = &binaryExpr{Op: "/", lhs: YYDollar[1].Ast, rhs: YYDollar[3].Ast}
		}
	case 17:
		YYDollar = YYS[YYpt-3 : YYpt+1]
//line internal/grammar.y:52
		{
			YYVAL.Ast = &binaryExpr{Op: YYDollar[2].String, lhs: YYDollar[1].Ast, rhs: YYDollar[3].Ast}
		}
	case 18:
		YYDollar = YYS[YYpt-3 : YYpt+1]
//line internal/grammar.y:53
		{
			YYVAL.Ast = &binaryExpr{Op: YYDollar[2].String, lhs: YYDollar[1].Ast, rhs: YYDollar[3].Ast}
		}
	case 19:
		YYDollar = YYS[YYpt-3 : YYpt+1]
//line internal/grammar.y:54
		{
			YYVAL.Ast = &binaryExpr{Op: YYDollar[2].String, lhs: YYDollar[1].Ast, rhs: YYDollar[3].Ast}
		}
	case 20:
		YYDollar = YYS[YYpt-3 : YYpt+1]
//line internal/grammar.y:55
		{
			YYVAL.Ast = &binaryExpr{Op: YYDollar[2].String, lhs: YYDollar[1].Ast, rhs: YYDollar[3].Ast}
		}
	case 21:
		YYDollar = YYS[YYpt-3 : YYpt+1]
//line internal/grammar.y:56
		{
			YYVAL.Ast = &binaryExpr{Op: YYDollar[2].String, lhs: YYDollar[1].Ast, rhs: YYDollar[3].Ast}
		}
	case 22:
		YYDollar = YYS[YYpt-3 : YYpt+1]
//line internal/grammar.y:57
		{
			YYVAL.Ast = &binaryExpr{Op: YYDollar[2].String, lhs: YYDollar[1].Ast, rhs: YYDollar[3].Ast}
		}
	case 23:
		YYDollar = YYS[YYpt-3 : YYpt+1]
//line internal/grammar.y:58
		{
			YYVAL.Ast = &parenExpr{YYDollar[2].Ast}
		}
	case 24:
		YYDollar = YYS[YYpt-2 : YYpt+1]
//line internal/grammar.y:59
		{
			YYVAL.Ast = &unaryExpr{YYDollar[2].Ast}
		}
	case 25:
		YYDollar = YYS[YYpt-4 : YYpt+1]
//line internal/grammar.y:63
		{
			YYVAL.Ast = &assignment{variable: YYDollar[2].String, expr: YYDollar[4].Ast}
		}
	case 26:
		YYDollar = YYS[YYpt-3 : YYpt+1]
//line internal/grammar.y:67
		{
			YYVAL.Ast = &reassignment{variable: YYDollar[1].String, expr: YYDollar[3].Ast}
		}
	case 27:
		YYDollar = YYS[YYpt-4 : YYpt+1]
//line internal/grammar.y:71
		{
			YYVAL.Ast = &stdPrint{expr: YYDollar[3].Ast}
		}
	case 28:
		YYDollar = YYS[YYpt-7 : YYpt+1]
//line internal/grammar.y:75
		{
			YYVAL.Ast = &ifStatement{cond: YYDollar[3].Ast, thenStmt: YYDollar[6].Ast, elseStmt: nil}
		}
	case 29:
		YYDollar = YYS[YYpt-11 : YYpt+1]
//line internal/grammar.y:76
		{
			YYVAL.Ast = &ifStatement{cond: YYDollar[3].Ast, thenStmt: YYDollar[6].Ast, elseStmt: YYDollar[10].Ast}
		}
	case 30:
		YYDollar = YYS[YYpt-7 : YYpt+1]
//line internal/grammar.y:80
		{
			YYVAL.Ast = &whileStatement{cond: YYDollar[3].Ast, body: YYDollar[6].Ast}
		}
	}
	goto YYstack /* stack new state and value */
}
